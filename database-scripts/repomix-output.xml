This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
auth-service/
  schema.sql
billing-service/
  schema.sql
common/
  base_functions.sql
iot-service/
  schema.sql
meter-service/
  schema.sql
property-service/
  schema.sql
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="auth-service/schema.sql">
-- ============================================
-- AUTH SERVICE DATABASE SCHEMA
-- Database: rent_auth_db
-- ============================================

-- Note: Keycloak manages its own tables
-- We only store minimal user mapping

CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY,
    keycloak_user_id VARCHAR(255) UNIQUE NOT NULL,
    
    phone_number VARCHAR(20) UNIQUE,
    user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('tenant', 'owner', 'admin')),
    score INT NOT NULL DEFAULT 500,
    email VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    
    is_active BOOLEAN DEFAULT true,
    email_verified BOOLEAN DEFAULT false,
    
    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID,
    updated_by UUID,
    created_by_service VARCHAR(50) DEFAULT 'auth-service',
    updated_by_service VARCHAR(50),
    
    deleted BOOLEAN DEFAULT false,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID,
    deletion_reason TEXT,
    
    version INTEGER DEFAULT 1
);

CREATE INDEX idx_users_keycloak_id ON users(keycloak_user_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_phone ON users(phone_number);
CREATE INDEX idx_users_type ON users(user_type);
CREATE INDEX idx_users_correlation_id ON users(correlation_id);
CREATE INDEX idx_users_deleted ON users(deleted);

CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();



CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    
    -- Address
    address_line1 VARCHAR(500),
    address_line2 VARCHAR(500),
    city VARCHAR(100),
    state VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    
    -- KYC Documents
    id_proof_type VARCHAR(50),  -- AADHAAR, PAN, PASSPORT, DRIVING_LICENSE
    id_proof_number VARCHAR(100),
    id_proof_verified BOOLEAN DEFAULT false,
    
    -- Bank Details (for owners)
    bank_account_number VARCHAR(50),
    bank_ifsc_code VARCHAR(20),
    bank_name VARCHAR(200),
    
    -- Emergency Contact
    emergency_contact_name VARCHAR(200),
    emergency_contact_phone VARCHAR(20),
    emergency_contact_relation VARCHAR(50),
    
    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
        
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id)
);

CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);
</file>

<file path="billing-service/schema.sql">
-- ============================================
-- BILLING CYCLES TABLE
-- ============================================
CREATE TABLE billing_cycles (
    id UUID PRIMARY KEY,
    
    -- Linkages
    tenancy_agreement_id UUID NOT NULL,  -- From property-service
    meter_id VARCHAR(100) NOT NULL,
    tenant_id UUID NOT NULL,
    property_id UUID NOT NULL,
    room_id UUID NOT NULL,
    
    -- Billing period
    cycle_start_date DATE NOT NULL,
    cycle_end_date DATE NOT NULL,
    billing_month VARCHAR(7) NOT NULL,  -- YYYY-MM format
    
    -- Energy readings
    opening_reading DECIMAL(15,4),
    closing_reading DECIMAL(15,4),
    total_consumption DECIMAL(15,4),
    
    -- Tariff breakdown
    t1_consumption DECIMAL(15,4),
    t2_consumption DECIMAL(15,4),
    t3_consumption DECIMAL(15,4),
    t4_consumption DECIMAL(15,4),
    
    -- Cost calculation
    rate_per_kwh DECIMAL(10,4),
    energy_cost DECIMAL(12,2),
    fixed_charges DECIMAL(10,2),
    tax_amount DECIMAL(10,2),
    total_amount DECIMAL(12,2),
    
    -- Billing status
    bill_status VARCHAR(20) DEFAULT 'GENERATED',  -- GENERATED, SENT, PAID, OVERDUE, DISPUTED
    bill_generated_at TIMESTAMP WITH TIME ZONE,
    bill_sent_at TIMESTAMP WITH TIME ZONE,
    due_date DATE,
    
    -- Payment
    payment_status VARCHAR(20) DEFAULT 'PENDING',  -- PENDING, PAID, PARTIALLY_PAID, OVERDUE
    paid_amount DECIMAL(12,2) DEFAULT 0,
    payment_date DATE,
    payment_method VARCHAR(50),
    payment_reference VARCHAR(100),
    
    -- Documents
    bill_document_url VARCHAR(500),
    payment_receipt_url VARCHAR(500),
    
        
    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),

    notes TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(meter_id, billing_month)
);

CREATE INDEX idx_billing_tenancy_id ON billing_cycles(tenancy_agreement_id);
CREATE INDEX idx_billing_meter_id ON billing_cycles(meter_id);
CREATE INDEX idx_billing_tenant_id ON billing_cycles(tenant_id);
CREATE INDEX idx_billing_dates ON billing_cycles(cycle_start_date, cycle_end_date);
CREATE INDEX idx_billing_status ON billing_cycles(bill_status);
CREATE INDEX idx_billing_payment_status ON billing_cycles(payment_status);
CREATE INDEX idx_billing_month ON billing_cycles(billing_month);
</file>

<file path="common/base_functions.sql">
-- Trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Soft delete helper
CREATE OR REPLACE FUNCTION soft_delete_record()
RETURNS TRIGGER AS $$
BEGIN
    NEW.deleted = true;
    NEW.deleted_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';
</file>

<file path="iot-service/schema.sql">
-- ============================================
-- IOT DEVICES TABLE (ESP32 Controllers)
-- ============================================
CREATE TABLE iot_devices (
    id UUID primary KEY,
    device_id VARCHAR(100) UNIQUE NOT NULL,  -- e.g., "ESP32_DEVICE_001"
    device_name VARCHAR(255),
    
    -- Ownership (optional - can be assigned to property)
    assigned_to_property_id UUID,  -- References properties(id) in property-service
    
    -- Device Info
    mac_address VARCHAR(20),
    firmware_version VARCHAR(50),
    hardware_version VARCHAR(50),
    
    -- Network
    ip_address INET,
    last_ip_address INET,
    
    -- Location
    installation_location VARCHAR(500),
    
    -- Status
    status VARCHAR(20) DEFAULT 'ACTIVE',  -- ACTIVE, INACTIVE, ERROR, MAINTENANCE
    last_heartbeat TIMESTAMP WITH TIME ZONE,
    
    -- Metadata
    notes TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID,
    updated_by UUID,

    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
);

CREATE INDEX idx_iot_devices_device_id ON iot_devices(device_id);
CREATE INDEX idx_iot_devices_property_id ON iot_devices(assigned_to_property_id);
CREATE INDEX idx_iot_devices_status ON iot_devices(status);
CREATE INDEX idx_iot_devices_last_heartbeat ON iot_devices(last_heartbeat);

-- ============================================
-- METERS TABLE (Physical Smart Meters)
-- ============================================
CREATE TABLE meters (
    id UUID PRIMARY KEY,
    meter_id VARCHAR(100) UNIQUE NOT NULL,  -- e.g., "ESP32_DEVICE_001-1"
    
    -- Device linkage
    device_id UUID NOT NULL REFERENCES iot_devices(id) ON DELETE CASCADE,
    meter_number INTEGER NOT NULL,  -- Position on ESP32 (1, 2, 3, etc.)
    
    -- Meter Hardware Info
    meter_model VARCHAR(100) DEFAULT 'EM113016-04',
    manufacturer VARCHAR(100) DEFAULT 'Ivy Metering',
    serial_number VARCHAR(100) UNIQUE,
    hardware_version VARCHAR(50),
    software_version VARCHAR(50),
    manufacture_date DATE,
    installation_date DATE,
    
    -- Communication Protocol
    protocol VARCHAR(20) DEFAULT 'DLT645_2007',  -- DLT645_1997, DLT645_2007, MODBUS
    meter_address VARCHAR(50),  -- DLT645 meter address (12 digits)
    meter_password VARCHAR(50),  -- DLT645 meter password (8 digits)
    modbus_address INTEGER,
    baud_rate INTEGER DEFAULT 9600,
    
    -- Meter Type
    phase_type VARCHAR(20) DEFAULT 'SINGLE',  -- SINGLE, THREE_PHASE
    meter_type VARCHAR(50) DEFAULT 'ENERGY',  -- ENERGY, WATER, GAS
    
    -- Configuration
    ct_ratio DECIMAL(10,2) DEFAULT 1.0,
    voltage_rating DECIMAL(10,2) DEFAULT 230.0,  -- Volts
    current_rating DECIMAL(10,2) DEFAULT 60.0,   -- Amperes
    
    -- Thresholds
    overload_threshold DECIMAL(10,2),  -- kW
    current_threshold DECIMAL(10,2),   -- Amperes
    overcurrent_threshold DECIMAL(10,2),
    
    -- Relay Configuration
    has_relay BOOLEAN DEFAULT true,
    relay_status VARCHAR(20) DEFAULT 'UNKNOWN',  -- ON, OFF, UNKNOWN, ERROR
    relay_control_logic VARCHAR(50),
    relay_auto_control_enabled BOOLEAN DEFAULT false,
    
    -- Assignment Status
    assignment_status VARCHAR(20) DEFAULT 'UNASSIGNED',  -- UNASSIGNED, ASSIGNED, IN_SERVICE, FAULTY, RETIRED
    assigned_to_property_id UUID,  -- Property it's installed in
    assigned_to_room_id UUID,      -- Specific room
    assigned_at TIMESTAMP WITH TIME ZONE,
    
    -- Service Status
    status VARCHAR(20) DEFAULT 'ACTIVE',  -- ACTIVE, INACTIVE, MAINTENANCE, FAULTY, RETIRED
    last_reading_at TIMESTAMP WITH TIME ZONE,
    last_maintenance_date DATE,
    next_maintenance_date DATE,
    
    -- Replacement tracking
    replaced_by_meter_id UUID,  -- If meter was replaced, ID of new meter
    replacement_reason TEXT,
    replacement_date DATE,
    
    -- Metadata
    notes TEXT,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID,
    updated_by UUID,
    
        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),

    UNIQUE(device_id, meter_number)
);

CREATE INDEX idx_meters_meter_id ON meters(meter_id);
CREATE INDEX idx_meters_device_id ON meters(device_id);
CREATE INDEX idx_meters_serial_number ON meters(serial_number);
CREATE INDEX idx_meters_assignment_status ON meters(assignment_status);
CREATE INDEX idx_meters_status ON meters(status);
CREATE INDEX idx_meters_property_id ON meters(assigned_to_property_id);
CREATE INDEX idx_meters_room_id ON meters(assigned_to_room_id);
CREATE INDEX idx_meters_relay_status ON meters(relay_status);

-- ============================================
-- METER ASSIGNMENT HISTORY
-- ============================================
CREATE TABLE meter_assignment_history (
    id UUID PRIMARY KEY,
    meter_id UUID NOT NULL REFERENCES meters(id) ON DELETE CASCADE,
    
    -- Assignment details
    property_id UUID,
    room_id UUID,
    tenant_id UUID,
    
    -- Timeline
    assigned_at TIMESTAMP WITH TIME ZONE NOT NULL,
    unassigned_at TIMESTAMP WITH TIME ZONE,
    
    -- Reason
    assignment_type VARCHAR(50),  -- NEW_INSTALLATION, REPLACEMENT, RELOCATION
    unassignment_reason VARCHAR(50),  -- TENANT_MOVED, METER_FAULT, UPGRADE
    
    -- Readings at assignment/unassignment
    opening_reading DECIMAL(15,4),
    closing_reading DECIMAL(15,4),
    
    notes TEXT,

        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID
);

CREATE INDEX idx_assignment_history_meter_id ON meter_assignment_history(meter_id);
CREATE INDEX idx_assignment_history_property_id ON meter_assignment_history(property_id);
CREATE INDEX idx_assignment_history_room_id ON meter_assignment_history(room_id);
CREATE INDEX idx_assignment_history_dates ON meter_assignment_history(assigned_at, unassigned_at);

-- ============================================
-- METER MAINTENANCE LOG
-- ============================================
CREATE TABLE meter_maintenance_log (
    id UUID PRIMARY KEY,
    meter_id UUID NOT NULL REFERENCES meters(id) ON DELETE CASCADE,
    
    -- Maintenance details
    maintenance_type VARCHAR(50) NOT NULL,  -- ROUTINE, REPAIR, REPLACEMENT, CALIBRATION
    maintenance_date DATE NOT NULL,
    
    -- Issue & Resolution
    issue_description TEXT,
    resolution_description TEXT,
    
    -- Technician
    technician_name VARCHAR(200),
    technician_contact VARCHAR(20),
    
    -- Cost
    cost DECIMAL(10,2),
    
    -- Parts replaced
    parts_replaced JSONB,
    
    -- Status after maintenance
    meter_status_after VARCHAR(20),  -- OPERATIONAL, NON_OPERATIONAL, NEEDS_REPLACEMENT
    
    -- Documents
    maintenance_report_url VARCHAR(500),
    
        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID
);

CREATE INDEX idx_maintenance_meter_id ON meter_maintenance_log(meter_id);
CREATE INDEX idx_maintenance_date ON meter_maintenance_log(maintenance_date DESC);
CREATE INDEX idx_maintenance_type ON meter_maintenance_log(maintenance_type);

-- ============================================
-- METER CONFIGURATION
-- ============================================
CREATE TABLE meter_configuration (
    id UUID PRIMARY KEY,
    meter_id UUID NOT NULL REFERENCES meters(id) ON DELETE CASCADE,
    
    -- Time Zone & Holiday Configuration
    time_zones JSONB,
    holidays JSONB,
    time_periods JSONB,
    
    -- Display Configuration
    display_mode VARCHAR(50),
    rotation_time INTEGER,
    pulse_output_type VARCHAR(50),
    
    -- Tariff Configuration
    rate_selection INTEGER DEFAULT 1,
    tariff_rates JSONB,  -- Store rate structure
    
    -- Other configs
    season_switch BOOLEAN DEFAULT false,
    measurement_mode VARCHAR(50),
    so_ratio_output DECIMAL(10,4),
    
    -- Sync status
    config_version INTEGER DEFAULT 1,
    last_synced_at TIMESTAMP WITH TIME ZONE,
    sync_status VARCHAR(20) DEFAULT 'PENDING',  -- PENDING, SYNCED, FAILED
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    UNIQUE(meter_id)
);

CREATE INDEX idx_meter_config_meter_id ON meter_configuration(meter_id);
CREATE INDEX idx_meter_config_sync_status ON meter_configuration(sync_status);
</file>

<file path="meter-service/schema.sql">
-- ============================================
-- METER READINGS TABLE (Time-Series Data)
-- ============================================
CREATE TABLE meter_readings (
    id BIGSERIAL PRIMARY KEY,
    meter_id VARCHAR(100) NOT NULL,  -- Meter ID (cross-service reference)
    reading_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    
    -- Energy Consumption
    total_active_energy DECIMAL(15,4),  -- kWh
    total_reactive_energy DECIMAL(15,4),  -- kvarh
    
    -- Tariff-based Energy (T1, T2, T3, T4)
    t1_active_energy DECIMAL(15,4),
    t2_active_energy DECIMAL(15,4),
    t3_active_energy DECIMAL(15,4),
    t4_active_energy DECIMAL(15,4),
    
    t1_reactive_energy DECIMAL(15,4),
    t2_reactive_energy DECIMAL(15,4),
    t3_reactive_energy DECIMAL(15,4),
    t4_reactive_energy DECIMAL(15,4),
    
    -- Forward/Reverse Energy
    forward_active_energy DECIMAL(15,4),
    reverse_active_energy DECIMAL(15,4),
    forward_reactive_energy DECIMAL(15,4),
    reverse_reactive_energy DECIMAL(15,4),
    
    -- Single Phase Values (always populated)
    voltage DECIMAL(10,2),  -- V
    current DECIMAL(10,3),  -- A
    active_power DECIMAL(12,4),  -- kW
    reactive_power DECIMAL(12,4),  -- kvar
    apparent_power DECIMAL(12,4),  -- kVA
    power_factor DECIMAL(5,3),
    
    -- Three Phase Values (NULL for single-phase meters)
    phase_a_voltage DECIMAL(10,2),
    phase_b_voltage DECIMAL(10,2),
    phase_c_voltage DECIMAL(10,2),
    
    phase_a_current DECIMAL(10,3),
    phase_b_current DECIMAL(10,3),
    phase_c_current DECIMAL(10,3),
    
    phase_a_active_power DECIMAL(12,4),
    phase_b_active_power DECIMAL(12,4),
    phase_c_active_power DECIMAL(12,4),
    
    phase_a_reactive_power DECIMAL(12,4),
    phase_b_reactive_power DECIMAL(12,4),
    phase_c_reactive_power DECIMAL(12,4),
    
    phase_a_apparent_power DECIMAL(12,4),
    phase_b_apparent_power DECIMAL(12,4),
    phase_c_apparent_power DECIMAL(12,4),
    
    phase_a_power_factor DECIMAL(5,3),
    phase_b_power_factor DECIMAL(5,3),
    phase_c_power_factor DECIMAL(5,3),
    
    -- Common fields
    grid_frequency DECIMAL(6,2),  -- Hz
    max_active_demand DECIMAL(12,4),
    max_reactive_demand DECIMAL(12,4),
    
    -- Status
    relay_status VARCHAR(20),
    temperature DECIMAL(5,2),
    alert_status VARCHAR(50),
    
    -- Raw data for debugging
    raw_data TEXT,

        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for time-series queries
CREATE INDEX idx_meter_readings_meter_id ON meter_readings(meter_id);
CREATE INDEX idx_meter_readings_timestamp ON meter_readings(reading_timestamp DESC);
CREATE INDEX idx_meter_readings_meter_timestamp ON meter_readings(meter_id, reading_timestamp DESC);

-- ============================================
-- RELAY COMMANDS TABLE
-- ============================================
CREATE TABLE relay_commands (
    id UUID PRIMARY KEY,
    meter_id VARCHAR(100) NOT NULL,
    
    -- Command
    command VARCHAR(20) NOT NULL,  -- ON, OFF
    command_status VARCHAR(20) DEFAULT 'PENDING',  -- PENDING, SENT, SUCCESS, FAILED, TIMEOUT
    
    -- User who issued command
    requested_by UUID NOT NULL,
    requested_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Execution timeline
    sent_at TIMESTAMP WITH TIME ZONE,
    acknowledged_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE,
    
    -- Response from device
    response_code VARCHAR(50),
    response_message TEXT,
    error_message TEXT,
    
    -- Retry mechanism
    retry_count INTEGER DEFAULT 0,
    max_retries INTEGER DEFAULT 3,
    next_retry_at TIMESTAMP WITH TIME ZONE,
    
    -- Context
    reason VARCHAR(500),
    notes TEXT,

        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_relay_commands_meter_id ON relay_commands(meter_id);
CREATE INDEX idx_relay_commands_status ON relay_commands(command_status);
CREATE INDEX idx_relay_commands_requested_at ON relay_commands(requested_at DESC);
CREATE INDEX idx_relay_commands_requested_by ON relay_commands(requested_by);

-- ============================================
-- DEVICE HEARTBEATS TABLE
-- ============================================
CREATE TABLE device_heartbeats (
    id BIGSERIAL PRIMARY KEY,
    device_id VARCHAR(100) NOT NULL,
    heartbeat_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    
    -- Device health
    uptime_seconds BIGINT,
    free_memory_kb INTEGER,
    wifi_signal_strength INTEGER,  -- RSSI
    connected_meters_count INTEGER,
    
    -- Network
    ip_address INET,
    mac_address VARCHAR(20),
    
    -- Firmware
    firmware_version VARCHAR(50),

        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_heartbeat_device_id ON device_heartbeats(device_id);
CREATE INDEX idx_heartbeat_timestamp ON device_heartbeats(heartbeat_timestamp DESC);

-- ============================================
-- METER EVENTS TABLE (Alerts & Anomalies)
-- ============================================
CREATE TABLE meter_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    meter_id VARCHAR(100) NOT NULL,
    
    event_type VARCHAR(50) NOT NULL,  -- OVERLOAD, OVERCURRENT, OFFLINE, TAMPER, LOW_POWER_FACTOR
    severity VARCHAR(20) DEFAULT 'INFO',  -- INFO, WARNING, ERROR, CRITICAL
    
    event_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    event_value DECIMAL(15,4),
    threshold_value DECIMAL(15,4),
    
    description TEXT,
    
    -- Resolution
    resolved BOOLEAN DEFAULT false,
    resolved_at TIMESTAMP WITH TIME ZONE,
    resolved_by UUID,
    resolution_notes TEXT,
    
    -- Notification status
    notification_sent BOOLEAN DEFAULT false,
    notification_sent_at TIMESTAMP WITH TIME ZONE,
    
        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_meter_events_meter_id ON meter_events(meter_id);
CREATE INDEX idx_meter_events_type ON meter_events(event_type);
CREATE INDEX idx_meter_events_severity ON meter_events(severity);
CREATE INDEX idx_meter_events_timestamp ON meter_events(event_timestamp DESC);
CREATE INDEX idx_meter_events_resolved ON meter_events(resolved);

-- ============================================
-- FROZEN DATA TABLE (Daily/Monthly snapshots)
-- ============================================
CREATE TABLE meter_frozen_data (
    id UUID PRIMARY KEY,
    meter_id VARCHAR(100) NOT NULL,
    freeze_type VARCHAR(20) NOT NULL,  -- DAILY, MONTHLY
    freeze_date DATE NOT NULL,
    
    -- Frozen values
    total_active_energy DECIMAL(15,4),
    total_reactive_energy DECIMAL(15,4),
    
    t1_active_energy DECIMAL(15,4),
    t2_active_energy DECIMAL(15,4),
    t3_active_energy DECIMAL(15,4),
    t4_active_energy DECIMAL(15,4),
    
    -- Consumption (difference from previous)
    daily_consumption DECIMAL(15,4),
    monthly_consumption DECIMAL(15,4),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

        -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    UNIQUE(meter_id, freeze_type, freeze_date)
);

CREATE INDEX idx_frozen_meter_id ON meter_frozen_data(meter_id);
CREATE INDEX idx_frozen_date ON meter_frozen_data(freeze_date DESC);
CREATE INDEX idx_frozen_type ON meter_frozen_data(freeze_type);
</file>

<file path="property-service/schema.sql">
-- ============================================
-- PROPERTIES TABLE
-- ============================================
CREATE TABLE properties (
    id UUID PRIMARY key,
    owner_id UUID NOT NULL,  -- References users(id) in user-service
    
    -- Property Details
    property_name VARCHAR(255) NOT NULL,
    property_type VARCHAR(50) NOT NULL,  -- APARTMENT, PG, HOSTEL, VILLA, INDEPENDENT_HOUSE
    
    -- Address
    address_line1 VARCHAR(500) NOT NULL,
    address_line2 VARCHAR(500),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    country VARCHAR(100) NOT NULL DEFAULT 'India',
    postal_code VARCHAR(20) NOT NULL,
    latitude DECIMAL(10,8),
    longitude DECIMAL(11,8),
    
    -- Property Metadata
    total_rooms INTEGER NOT NULL DEFAULT 0,
    total_floors INTEGER DEFAULT 1,
    built_year INTEGER,
    carpet_area DECIMAL(10,2),  -- in sq ft
    
    -- Registration
    property_registration_number VARCHAR(100),
    property_tax_number VARCHAR(100),
    
    -- Status
    status VARCHAR(20) DEFAULT 'ACTIVE',  -- ACTIVE, INACTIVE, UNDER_MAINTENANCE
    verification_status VARCHAR(20) DEFAULT 'PENDING',  -- PENDING, VERIFIED, REJECTED
    verified_at TIMESTAMP WITH TIME ZONE,
    verified_by UUID,  -- Admin user who verified
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()

        
    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
);

CREATE INDEX idx_properties_owner_id ON properties(owner_id);
CREATE INDEX idx_properties_status ON properties(status);
CREATE INDEX idx_properties_verification ON properties(verification_status);
CREATE INDEX idx_properties_city ON properties(city);

-- ============================================
-- ROOMS TABLE
-- ============================================
CREATE TABLE rooms (
    id UUID PRIMARY KEY,
    property_id UUID NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
    
    -- Room Details
    room_number VARCHAR(50) NOT NULL,
    room_name VARCHAR(100),
    floor_number INTEGER,
    room_type VARCHAR(50),  -- SINGLE, DOUBLE, SHARED, STUDIO
    
    -- Room Specifications
    carpet_area DECIMAL(10,2),  -- in sq ft
    has_attached_bathroom BOOLEAN DEFAULT false,
    has_ac BOOLEAN DEFAULT false,
    has_balcony BOOLEAN DEFAULT false,
    furnishing_type VARCHAR(50),  -- FURNISHED, SEMI_FURNISHED, UNFURNISHED
    
    -- Occupancy
    max_occupancy INTEGER DEFAULT 1,
    current_occupancy INTEGER DEFAULT 0,
    
    -- Rental Info
    monthly_rent DECIMAL(10,2),
    security_deposit DECIMAL(10,2),


    
    -- Status
    status VARCHAR(20) DEFAULT 'VACANT',  -- VACANT, OCCUPIED, UNDER_MAINTENANCE, RESERVED
    
    -- Meter Assignment (will be linked from meter-service)
    meter_id VARCHAR(100),  -- Meter ID from meter-service
    meter_assigned_at TIMESTAMP WITH TIME ZONE,

            -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    
    
    UNIQUE(property_id, room_number)
);

CREATE INDEX idx_rooms_property_id ON rooms(property_id);
CREATE INDEX idx_rooms_status ON rooms(status);
CREATE INDEX idx_rooms_meter_id ON rooms(meter_id);

-- ============================================
-- TENANCY AGREEMENTS (Room assignments to tenants)
-- ============================================
CREATE TABLE tenancy_agreements (
    id UUID PRIMARY KEY,
    
    -- Linkages
    room_id UUID NOT NULL REFERENCES rooms(id) ON DELETE CASCADE,
    tenant_id UUID NOT NULL,  -- References users(id) in user-service
    property_id UUID NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
    
    -- Agreement Details
    agreement_number VARCHAR(100) UNIQUE,
    start_date DATE NOT NULL,
    end_date DATE,
    
    -- Financial Terms
    monthly_rent DECIMAL(10,2) NOT NULL,
    security_deposit DECIMAL(10,2) NOT NULL,
    deposit_paid BOOLEAN DEFAULT false,
    deposit_paid_date DATE,
    
    -- Utilities
    electricity_included BOOLEAN DEFAULT false,
    water_included BOOLEAN DEFAULT false,
    
    -- Agreement Status
    status VARCHAR(20) DEFAULT 'ACTIVE',  -- ACTIVE, EXPIRED, TERMINATED, PENDING
    
    -- Termination
    termination_date DATE,
    termination_reason TEXT,
    termination_notice_period INTEGER,  -- in days
    
    -- Documents
    agreement_document_url VARCHAR(500),

            -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_tenancy_room_id ON tenancy_agreements(room_id);
CREATE INDEX idx_tenancy_tenant_id ON tenancy_agreements(tenant_id);
CREATE INDEX idx_tenancy_property_id ON tenancy_agreements(property_id);
CREATE INDEX idx_tenancy_status ON tenancy_agreements(status);
CREATE INDEX idx_tenancy_dates ON tenancy_agreements(start_date, end_date);

-- ============================================
-- PROPERTY VERIFICATION REQUESTS
-- ============================================
CREATE TABLE property_verification_requests (
    id UUID PRIMARY KEY,
    property_id UUID NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
    
    -- Documents submitted
    ownership_proof_url VARCHAR(500),
    property_tax_receipt_url VARCHAR(500),
    property_photos JSONB,  -- Array of photo URLs
    
    -- Verification
    status VARCHAR(20) DEFAULT 'PENDING',  -- PENDING, APPROVED, REJECTED
    reviewed_by UUID,  -- Admin user
    reviewed_at TIMESTAMP WITH TIME ZONE,
    rejection_reason TEXT,

    -- AUDIT & CORRELATION
    correlation_id UUID,
    request_id VARCHAR(100),
    trace_id VARCHAR(100),
    span_id VARCHAR(100),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_verification_property_id ON property_verification_requests(property_id);
CREATE INDEX idx_verification_status ON property_verification_requests(status);
</file>

</files>
